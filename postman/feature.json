{
	"info": {
		"_postman_id": "6d933fa9-9ff4-4a81-8c87-980d3287c103",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "19546929"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Добавление пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"demeiz@yandex.ru\",\r\n    \"name\":\"Илья\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/admin/users"
					},
					"response": []
				},
				{
					"name": "Получение пользователей",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name, email\", function () {\r",
									"pm.expect(jsonData[0]).to.have.property('id');\r",
									"pm.expect(jsonData[0]).to.have.property('name');\r",
									"pm.expect(jsonData[0]).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"    pm.expect(jsonData[0].name).to.eql('Илья');\r",
									"    pm.expect(jsonData[0].email).to.eql('demeiz@yandex.ru');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/admin/users/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Добавление категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка наличия кода ответа 201\", function()  {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Путешествие\"}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/admin/categories"
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Создание события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"annotation\":\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. \",\"category\":1,\"description\":\"О Санкт-Петербурге...\",\"eventDate\":\"2030-09-09 15:01:01\",\"location\":{\"lat\":59.5,\"lon\":30.1},\"paid\":\"true\",\"participantLimit\":\"5\",\"requestModeration\":\"false\",\"title\":\"Культура Петербурга\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/:userId/events",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Создание комментария с валидацией на пользователя не опубликованного события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка наличия пользователя\", function()  {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/:userId/events/:eventId/comment",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобрение ивента администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/admin/events/:eventId",
							"host": [
								"{{url}}"
							],
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, text, author, event, createTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createTime');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Тестовый комментарий 1№\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.be.notFound;  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/:userId/comment/:comId",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":comId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "comId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария другим пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function () {\r",
									"    pm.response.to.have.status(409);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/:userId/comment/:comId",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":comId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "comId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/:userId/comment/:comId",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":comId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "comId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария [дубль]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, text, author, event, createTime\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('createTime');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Тестовый комментарий 1№\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comment"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария 1#",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Обновленный тестовый комментарий 1№\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/:userId/comment/:comId",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":comId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "comId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comment/:comId",
							"host": [
								"{{url}}"
							],
							"path": [
								"comment",
								":comId"
							],
							"variable": [
								{
									"key": "comId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comment/search?text=com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comment",
								"search"
							],
							"query": [
								{
									"key": "text",
									"value": "com"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}